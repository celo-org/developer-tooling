name: Upload celocli executables

on:
  workflow_call:
    inputs:
      ref:
        description: 'Commit-ish of the developer-tooling repo that the celocli should be compiled and uploaded from'
        type: string
        required: true

  workflow_dispatch:
    inputs:
      ref:
        description: 'Commit-ish of the developer-tooling repo that the celocli should be compiled and uploaded from'
        type: string
        required: true

jobs:
  setupVariables:
    name: Asserts and setup
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.setupVars.outputs.version }}
      commit: ${{ steps.setupVars.outputs.commit }}
    steps:
      - name: Checkout Repo
        uses: actions/checkout@v4
        with:
          ref: ${{ inputs.ref }}
          fetch-depth: 0
          fetch-tags: true

      - name: Setup Node.js 20.x
        uses: actions/setup-node@v4
        with:
          node-version: 20.x

      - name: 'enable corepack for yarn'
        run: sudo corepack enable yarn
        shell: bash
      # must call twice because of chicken and egg problem with yarn and node
      - uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'yarn'

      - name: Install Dependencies
        shell: bash
        run: yarn

      - id: setupVars
        name: Setup variables
        env:
          GH_TOKEN: ${{ github.token }}
        run: |
          # Parse version from the package.json
          version=$(cat packages/cli/package.json | jq -r .version)
          echo "version=$version" >> "$GITHUB_OUTPUT"

          # Get the short commit from github release
          commit=$(gh release view @celo/celocli@$version --json tagName \
            | jq '.tagName' \
            | xargs git rev-list -n 1 --abbrev-commit)
          echo "commit=$commit" >> "$GITHUB_OUTPUT"

          cat $GITHUB_OUTPUT

      - name: Assert stable release
        run: |
          ./scripts/assert_stable_version $TARBALL_VERSION
        env:
          TARBALL_VERSION: ${{ steps.setupVars.outputs.version }}
  compile:
    needs: [setupVariables]
    name: Compile executables for each platform and uplod to github release
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
    env:
      targets: |
        {
          \"ubuntu-latest\": [
            \"linux-arm\", 
            \"linux-arm64\", 
            \"linux-x64\"
          ],
          \"macos-latest\": [
            \"darwin-arm64\", 
            \"darwin-x64\"
          ],
          \"windows-latest\": [
            \"win32-arm64\",
            \"win32-x64\",
            \"win32-x86\"
          ]
        }
    runs-on: ${{ matrix.os }}
    steps:
      - name: Checkout Repo
        uses: actions/checkout@v4
        with:
          ref: ${{ inputs.ref }}
          fetch-depth: 0
          fetch-tags: true
      - name: Setup Node.js 20.x
        uses: actions/setup-node@v4
        with:
          node-version: 20.x
      - name: 'enable corepack for yarn'
        run: sudo corepack enable yarn
        shell: bash
      # must call twice because of chicken and egg problem with yarn and node
      - uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'yarn'
      - name: Install Dependencies
        shell: bash
        run: yarn

      - name: Upload executables on the github release
        working-directory: packages/cli
        run: |
          # Download tarball from published release on NPM and save path
          tarballPath=/tmp/$(npm pack @celo/celocli@$version \
            --json \
            --pack-destination /tmp/ \
            | jq 'first.filename' -r)

          targets=$(echo "${{ env.targets }}" | jq -r '.${{ matrix.os }}' | join(","))

          # Pack the tarballs from NPM into platform specific executables
          yarn oclif pack tarballs --tarball=$tarballPath --targets=$targets

          ls -la ./dist/
          gh release upload --clobber @celo/celocli@${{ needs.setupVariables.outputs.version }} ./dist/*.xz
        env:
          GH_TOKEN: ${{ github.token }}

  upload:
    needs: [setupVariables, compile]
    name: Submit homebrew PR
    runs-on: ubuntu-latest
    permissions:
      contents: write
      id-token: write
      pull-requests: write
      repository-projects: write
    steps:
      - name: Get Token from Akeyless
        id: get_token
        uses: docker://us-west1-docker.pkg.dev/devopsre/akeyless-public/akeyless-action:latest
        with:
          api-url: https://api.gateway.akeyless.celo-networks-dev.org
          access-id: p-kf9vjzruht6l
          dynamic-secrets: '{"/dynamic-secrets/keys/github/homebrew-brew/contents=write":"HOMEBREW_BREW_TOKEN"}'

      - name: Checkout Repo
        uses: actions/checkout@v4
        with:
          ref: ${{ inputs.ref }}
          fetch-depth: 0
          fetch-tags: true

      - name: Set up Homebrew
        id: set-up-homebrew
        uses: Homebrew/actions/setup-homebrew@master

      - name: Checkout Celo Homebrew Tap
        uses: actions/checkout@v4
        with:
          repository: 'celo-org/homebrew-brew'
          path: '/home/runner/work/developer-tooling/developer-tooling/homebrew-brew'
          ref: main
          token: ${{ env.HOMEBREW_BREW_TOKEN }}

      - name: Setup Node.js 20.x
        uses: actions/setup-node@v4
        with:
          node-version: 20.x
      - name: 'enable corepack for yarn'
        run: sudo corepack enable yarn
        shell: bash
      # must call twice because of chicken and egg problem with yarn and node
      - uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'yarn'
      - name: Install Dependencies
        shell: bash
        run: yarn

      - name: Prepare the homebrew PR
        run: |
          # Fetch the platform-specific executables from github release
          gh release download -R celo-org/developer-tooling -D dist @celo/celocli@${{ needs.setupVariables.outputs.version }}

          # Run the package.json's homebrew script
          yarn run homebrew

          # Sanity checks
          ls dist
          cat ./homebrew/Formula/celocli.rb
        working-directory: packages/cli
        env:
          GITHUB_SHA_SHORT: ${{ needs.setupVariables.outputs.commit }}
          TARBALL_VERSION: ${{ needs.setupVariables.outputs.version }}
          GH_TOKEN: ${{ github.token }}

      - name: Homebrew tests
        working-directory: packages/cli
        run: |
          brew update
          brew cleanup
          ./homebrew/scripts/test.sh

      - name: Open pull-request on Homebrew repo
        if: ${{ env.HOMEBREW_BREW_TOKEN }}
        working-directory: packages/cli
        env:
          BOT_NAME: 'celo-org'
          BOT_EMAIL: 'celo-org@github.com'
          HOMEBREW_FORK: 'celo-org:homebrew-brew'
          BASE_BRANCH: main
          NEW_BRANCH: 'ci/celocli-${{ needs.setupVariables.outputs.version }}'
          GH_TOKEN: ${{ env.HOMEBREW_BREW_TOKEN }}
          RELEASE_URL: 'https://github.com/celo-org/developer-tooling/releases/download/%40celo%2Fcelocli%40${{ needs.setupVariables.outputs.version }}'
        run: |
          set -x

          cli_workspace=$(pwd)
          cd /home/runner/work/developer-tooling/developer-tooling/homebrew-brew

          # Setup the committers identity.
          git config --global user.name ${{ env.BOT_NAME }}
          git config --global user.email ${{ env.BOT_EMAIL }}

          # Create a new feature branch for the changes.
          git checkout -b ${{ env.NEW_BRANCH }}
          git status
          cp $cli_workspace/homebrew/Formula/celocli.rb ./Formula/celocli.rb
          git add ./Formula/celocli.rb
          git diff --cached

          # Commit the new Formula
          git commit -m "celocli ${{ needs.setupVariables.outputs.version }}"
          git push origin ${{ env.NEW_BRANCH }} -f


          # Write the commit message into a file
          cat >/tmp/pr-body.md <<EOL
          Update celocli formula to [${{ needs.setupVariables.outputs.version }}](${{ env.RELEASE_URL }}).

          ðŸ¤– _This pull-request was opened by a robot beep boop from [@${{ env.BOT_NAME }}](https://github.com/celo-org)_ ðŸ¤–
          EOL

          # Open a pull-request
          gh pr create \
            --body-file /tmp/pr-body.md \
            --reviewer "celo-org/devtooling" \
            --title "celocli ${{ needs.setupVariables.outputs.version }}" \
            --base "${{ env.BASE_BRANCH }}" \
            --head "${{ env.NEW_BRANCH }}"
