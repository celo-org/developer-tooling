---
name: Open a pull-request on the celo-org/docs repository

on:
  workflow_call:
    inputs:
      commit:
        description: 'Commit of the developer-tooling repo that the submodule will be updated to'
        type: string
        required: true

  workflow_dispatch:
    inputs:
      commit:
        description: 'Commit of the developer-tooling repo that the submodule will be updated to'
        type: string
        required: true

jobs:
  open-docs-pr:
    name: Open a pull-request on the celo-org/docs repository
    runs-on: ubuntu-latest
    permissions:
      contents: write
      id-token: write
      pull-requests: write
      repository-projects: write
    steps:
      - name: Fetch secrets from AKeyless
        id: fetch-secrets
        uses: docker://us-west1-docker.pkg.dev/devopsre/akeyless-public/akeyless-action:latest
        with:
          access-id: p-kf9vjzruht6l
          api-url: https://api.gateway.akeyless.celo-networks-dev.org
          dynamic-secrets: '{"/dynamic-secrets/keys/github/docs/contents=write,pull_requests=write":"DOCS_TOKEN"}'

      - name: Checkout Repo
        uses: actions/checkout@v4
        with:
          repository: 'celo-org/docs'
          submodules: 'recursive'
          fetch-depth: 0
          ref: main
          token: ${{ env.DOCS_TOKEN }}

      - name: Open pull-request
        env:
          COMMIT: ${{ inputs.commit }}
          REPOSITORY: 'celo-org/docs'
          DOCS_CWD: 'celo-docs'
          BASE_BRANCH: main
          NEW_BRANCH: 'ci/${{ github.run_id }}-${{ github.run_attempt }}'
          BOT_NAME: 'github-actions'
          BOT_EMAIL: 'github-actions@github.com'

        run: |
          set -x

          # Setup the committers identity.
          git config --global user.name $BOT_NAME
          git config --global user.email $BOT_EMAIL

          # Create a new feature branch for the changes.
          git checkout -b $NEW_BRANCH

          # Initialize submodule if it doesn't exist
          if [ ! -d "submodules/developer-tooling" ]; then
            git submodule add https://github.com/celo-org/developer-tooling.git submodules/developer-tooling
            git submodule update --init --recursive
          fi

          cd submodules/developer-tooling
          git fetch --all
          git checkout $COMMIT
          cd ../..
          
          # Create target directory if it doesn't exist
          mkdir -p ./tooling/libraries-sdks/cli
          
          # Remove existing files except index.md and readme files
          find ./tooling/libraries-sdks/cli -type f \( -name "*.md" -o -name "*.mdx" \) ! -name "index.mdx" ! -name "*readme*" ! -name "*README*" -delete
          
          # Copy files and rename .md to .mdx
          for file in ./submodules/developer-tooling/docs/command-line-interface/*.md; do
            if [ -f "$file" ]; then
              basename=$(basename "$file" .md)
              cp "$file" "./tooling/libraries-sdks/cli/${basename}.mdx"
            fi
          done
          
          # Add frontmatter to each command doc file
          for file in ./tooling/libraries-sdks/cli/*.mdx; do
            if [ -f "$file" ]; then
              basename=$(basename "$file" .mdx)
              # Skip index file and readme files
              if [[ "$basename" != "index" && "$basename" != *"readme"* && "$basename" != *"README"* ]]; then
                # Capitalize first letter of command name
                capitalized=$(echo "$basename" | sed 's/^./\U&/')
                
                # Create temporary file with frontmatter
                cat > "$file.tmp" << EOF
              ---
              title: celocli $basename
              sidebarTitle: "$capitalized"
              ---

              EOF
                # Append original content
                cat "$file" >> "$file.tmp"
                # Replace original file
                mv "$file.tmp" "$file"
              fi
            fi
          done
          
          # Add warning file about generated content (only if it doesn't exist)
          if [ ! -f "./tooling/libraries-sdks/cli/README.txt" ]; then
            cat > ./tooling/libraries-sdks/cli/README.txt << 'EOF'
          ⚠️ Do Not Edit These Files Directly

          The files in this directory are automatically generated from the celo-org/developer-tooling repository.

          To make changes to the CLI documentation:
          1. Edit the source files in the developer-tooling repository
          2. The changes will be automatically synced to this documentation site

          Any manual edits made directly to these files will be overwritten during the next sync.
          EOF
          fi

          git status
          git add submodules/developer-tooling
          git add tooling/libraries-sdks/cli
          git commit -m "chore: update developer-tooling submodule"
          git push origin $NEW_BRANCH

          cat >/tmp/pr-body.md <<EOL
          Update developer-tooling submodule to [$COMMIT](https://github.com/celo-org/developer-tooling/commit/$COMMIT).

          Merging this pull-request will update the docs using generated files (such as the CLI docs).

          🤖 _This pull-request was opened by a robot beep boop._ 🤖
          EOL

          echo "$DOCS_TOKEN" > token.txt
          gh auth login --with-token < token.txt
          gh pr create \
            --body-file /tmp/pr-body.md \
            --title "chore: update auto-generated docs reference from developer-tooling" \
            --head "$NEW_BRANCH" \
            --base "$BASE_BRANCH"
